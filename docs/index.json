[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/convnet_vol.ts",
    "content": "import * as utils from './utils';\n\ninterface VolModel {\n    sx: Array<number>|number;\n    sy: Array<number>|number;\n    depth: number;\n    w: Float64Array;\n}\n\n/**\n * Store a 3D volume of numbers with width(sx), height(sy), depth(depth) for the network.\n * It also holds weights and gradients w.r.t the weights.\n */\nexport class Vol {\n    sx: number;\n    sy: number;\n    depth: number;\n    w: Float64Array;\n    dw: Float64Array;\n    constructor(sx: any, sy: any, depth: number, c?: number) {\n        this.init(sx, sy, depth, c);\n    }\n    /**\n     * Initialize the network input placeholders and parameters\n     * - If the given `width` is an array, we assume that 1D volume is provided\n     * - If the given `width`/`height`/`depth` are all `number`, it will be treated as a 3D vlumn\n     */\n    init(sx: any, sy: any, depth: number, c?: number) {\n        if (Array.isArray(sx)) {\n            this.sx = 1;\n            this.sx = 1;\n            this.depth = sx.length;\n            this.w = utils.zeros(this.depth);\n            this.dw = utils.zeros(this.depth);\n            sx.forEach((item, index) => this.w[index] = item);\n        } else {\n            this.sx = sx;\n            this.sy = sy;\n            this.depth = depth;\n            let n = sx * sy * depth;\n            this.w = utils.zeros(n);\n            this.dw = utils.zeros(n);\n            this.w.fill(c || Math.sqrt(1.0 / n));\n        }\n    }\n    /**\n     * Address the node by given `width`(x), `height`(y) and `depth`(d), then return the index of this node in the flatten 1D list.\n     */\n    getNodeIndex(x: number, y: number, d: number): number {\n        return ((this.sx * y) + x) * this.depth + d;\n    }\n    /**\n     * Address the node and return its weight.\n     */\n    get(x: number, y: number, d: number): number {\n        let idx = this.getNodeIndex(x, y, d);\n        return this.w[idx];\n    }\n    /**\n     * Address the node and reset its weight to the given `value`(v).\n     */\n    set(x: number, y: number, d: number, v: number): void {\n        let idx = this.getNodeIndex(x, y, d);\n        this.w[idx] = v;\n    }\n    /**\n     * Address the node and add the given `value`(v) to its weight.\n     */\n    add(x: number, y: number, d: number, v: number): void {\n        let idx = this.getNodeIndex(x, y, d);\n        this.w[idx] += v;\n    }\n    /**\n     * Address the node and return its gradient.\n     */\n    get_grad(x: number, y: number, d: number): number {\n        let idx = this.getNodeIndex(x, y, d);\n        return this.dw[idx];\n    }\n    /**\n     * Address the node and reset its gradient to the given `value`(v).\n     */\n    set_grad(x: number, y: number, d: number, v: number): void {\n        let idx = this.getNodeIndex(x, y, d);\n        this.dw[idx] = v;\n    }\n    /**\n     * Address the node and add the given `value`(v) to its gradient.\n     */\n    add_grad(x: number, y: number, d: number, v: number): void {\n        let idx = this.getNodeIndex(x, y, d);\n        this.dw[idx] += v;\n    }\n    /**\n     * Return a clone of current network and initialize the weights and gradients as 0\n     */\n    cloneAndZero(): Vol {\n        return new Vol(this.sx, this.sy, this.depth, 0.0);\n    }\n    /**\n     * Return a clone of current network with the same parameters, only reset gradients to 0\n     */\n    clone(): Vol {\n        let volume = new Vol(this.sx, this.sy, this.depth, 0.0);\n        this.w.forEach((item, index) => {\n            volume.w[index] = item;\n        });\n        return volume;\n    }\n    /**\n     * Add the weights of a given network `volume` to current network\n     */\n    addFrom(volume: Vol): void {\n        this.w.forEach((item, index) => {\n            this.w[index] += volume.w[index];\n        });\n    }\n    /**\n     * Add the weights of a given network `volume` with scale `alpha` to current network\n     */\n    addFromScaled(volume: Vol, alpha: number): void {\n        this.w.forEach((item, index) => {\n            this.w[index] += alpha * volume.w[index];\n        });\n    }\n    /**\n     * Reset the weights of current network to a given constant number `value`\n     */\n    setConst(value: number): void {\n        this.w.forEach((item, index) => {\n            this.w[index] = value;\n        });\n    }\n    /**\n     * Reset the netwrok information parameters informations\n     */\n    fromJSON(obj: VolModel) {\n        this.init(obj.sx, obj.sy, obj.depth);\n    }\n    /**\n     * Expose the netwrok parameters information\n     */\n    toJSON(): VolModel {\n        return {\n            sx: this.sx,\n            sy: this.sy,\n            depth: this.depth,\n            w: this.w\n        };\n    }\n}",
    "static": true,
    "longname": "/Users/dyabo/Desktop/convnet-sourcecode/src/convnet_vol.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Vol",
    "memberof": "src/convnet_vol.ts",
    "static": true,
    "longname": "src/convnet_vol.ts~Vol",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/convnet_vol.ts",
    "importStyle": "{Vol}",
    "description": "Store a 3D volume of numbers with width(sx), height(sy), depth(depth) for the network.\nIt also holds weights and gradients w.r.t the weights.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "init",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#init",
    "access": "public",
    "description": "Initialize the network input placeholders and parameters\n- If the given `width` is an array, we assume that 1D volume is provided\n- If the given `width`/`height`/`depth` are all `number`, it will be treated as a 3D vlumn",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "sx",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "sy",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "sx",
    "memberof": "src/convnet_vol.ts~Vol",
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#sx",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "depth",
    "memberof": "src/convnet_vol.ts~Vol",
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#depth",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "w",
    "memberof": "src/convnet_vol.ts~Vol",
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#w",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "dw",
    "memberof": "src/convnet_vol.ts~Vol",
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#dw",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "sy",
    "memberof": "src/convnet_vol.ts~Vol",
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#sy",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "getNodeIndex",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#getNodeIndex",
    "access": "public",
    "description": "Address the node by given `width`(x), `height`(y) and `depth`(d), then return the index of this node in the flatten 1D list.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "get",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#get",
    "access": "public",
    "description": "Address the node and return its weight.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "set",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#set",
    "access": "public",
    "description": "Address the node and reset its weight to the given `value`(v).",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "add",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#add",
    "access": "public",
    "description": "Address the node and add the given `value`(v) to its weight.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "get_grad",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#get_grad",
    "access": "public",
    "description": "Address the node and return its gradient.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "set_grad",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#set_grad",
    "access": "public",
    "description": "Address the node and reset its gradient to the given `value`(v).",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "add_grad",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#add_grad",
    "access": "public",
    "description": "Address the node and add the given `value`(v) to its gradient.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "cloneAndZero",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#cloneAndZero",
    "access": "public",
    "description": "Return a clone of current network and initialize the weights and gradients as 0",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "Vol"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "clone",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#clone",
    "access": "public",
    "description": "Return a clone of current network with the same parameters, only reset gradients to 0",
    "lineNumber": 103,
    "return": {
      "nullable": null,
      "types": [
        "Vol"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "addFrom",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#addFrom",
    "access": "public",
    "description": "Add the weights of a given network `volume` to current network",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vol"
        ],
        "spread": false,
        "optional": false,
        "name": "volume",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "addFromScaled",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#addFromScaled",
    "access": "public",
    "description": "Add the weights of a given network `volume` with scale `alpha` to current network",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vol"
        ],
        "spread": false,
        "optional": false,
        "name": "volume",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "setConst",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#setConst",
    "access": "public",
    "description": "Reset the weights of current network to a given constant number `value`",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#fromJSON",
    "access": "public",
    "description": "Reset the netwrok information parameters informations",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "VolModel"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/convnet_vol.ts~Vol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/convnet_vol.ts~Vol#toJSON",
    "access": "public",
    "description": "Expose the netwrok parameters information",
    "lineNumber": 143,
    "return": {
      "nullable": null,
      "types": [
        "VolModel"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/convnet_vol_util.ts",
    "content": "import * as util from './utils';\nimport { Vol } from './convnet_vol';\n\n/**\n * Data augmentation to the given `volume` based on `crop`.\n * - `crop` is the size of output\n * - `dx`,`dy` are offset wrt incoming volume, of the shift\n * - `flip` is boolean on whether we also want to flip the matrix between left and right horizontally\n */\nexport function augment(volume: Vol, crop: number, dx?: number, dy?: number, flip?: number): Vol {\n    if (isNaN(dx)) {\n        dx = util.randi(0, volume.sx - crop);\n    }\n    if (isNaN(dy)) {\n        dy = util.randi(0, volume.sy - crop);\n    }\n    let croppedVolume;\n    if (crop !== volume.sx || dx!==0 || dy!==0) {\n        croppedVolume = new Vol(crop, crop, volume.depth, 0.0);\n        for(let x = 0; x < crop; x++) {\n            for(let y = 0; y < crop; y++) {\n                if (x + dx < 0 || x + dx >= volume.sx || y + dy < 0 || y + dy >= volume.sy) {\n                    continue;\n                } else {\n                    for(let d = 0; d < volume.depth; d++) {\n                        // Fetch the weight value by offset `dx`/`dy`, then set it to the `croppedVolume`\n                        croppedVolume.set(x, y, d, volume.get(x + dx, y + dy, d));\n                    }\n                }\n            }\n        }\n    } else {\n        croppedVolume = volume;\n    }\n\n    if(flip) {\n        // Horizontally get the flipped `croppedVolume` and set it to a cloneAndZeroed volume\n        let clonedCroppedVolume = croppedVolume.cloneAndZero();\n        for(let x = 0; x < croppedVolume.sx; x++) {\n            for(let y = 0; y < croppedVolume.sy; y++) {\n                for(let d = 0; d < croppedVolume.depth; d++) {\n                    clonedCroppedVolume.set(x, y, d, croppedVolume.get(croppedVolume.sx - x - 1, y, d));\n                }\n            }\n        }\n        croppedVolume = clonedCroppedVolume;\n    }\n    return croppedVolume;\n}\n\n/**\n * Load an HTML DOM image to a virtual canvas and get the pixles data. Then return a `volume` based on the image data\n * - If `grayScale` is given, the depth of the `volume` is 1\n * - If `grayScale` is not given, the depth of the `volume` is 4 (RGBA)\n */\nexport function img_to_vol(img: HTMLImageElement, grayScale: boolean = false): Vol {\n    let canvas = document.createElement('canvas');\n    canvas.width = img.width;\n    canvas.height = img.width;\n    let context = canvas.getContext('2d');\n    context.drawImage(img, 0, 0);\n    let imgData = context.getImageData(0, 0, canvas.width, canvas.height);\n    // Extract the pixels data from image through a canvas\n    let {data, width, height} = imgData;\n    let volume = new Vol(width, height, 4, 0.0);\n    volume.w = Float64Array.from(data, item => item / 255.0 - 0.5);\n    // Only keep the gray channel data\n    if (grayScale) {\n        let grayScaleVolume = new Vol(width, height, 1, 0.0);\n        for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n                grayScaleVolume.set(i, j, 0, volume.get(i, j, 0));\n            }\n        }\n        volume = grayScaleVolume;\n    }\n    return volume;\n}",
    "static": true,
    "longname": "/Users/dyabo/Desktop/convnet-sourcecode/src/convnet_vol_util.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "augment",
    "memberof": "src/convnet_vol_util.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/convnet_vol_util.ts~augment",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/convnet_vol_util.ts",
    "importStyle": "{augment}",
    "description": "Data augmentation to the given `volume` based on `crop`.\n- `crop` is the size of output\n- `dx`,`dy` are offset wrt incoming volume, of the shift\n- `flip` is boolean on whether we also want to flip the matrix between left and right horizontally",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vol"
        ],
        "spread": false,
        "optional": false,
        "name": "volume",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "crop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dx",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dy",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "flip",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vol"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "img_to_vol",
    "memberof": "src/convnet_vol_util.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/convnet_vol_util.ts~img_to_vol",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/convnet_vol_util.ts",
    "importStyle": "{img_to_vol}",
    "description": "Load an HTML DOM image to a virtual canvas and get the pixles data. Then return a `volume` based on the image data\n- If `grayScale` is given, the depth of the `volume` is 1\n- If `grayScale` is not given, the depth of the `volume` is 4 (RGBA)",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLImageElement"
        ],
        "spread": false,
        "optional": false,
        "name": "img",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "grayScale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vol"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/index.ts",
    "content": "export * from './utils';\nexport * from './convnet_vol';\nexport * from './convnet_vol_util';\n\nexport const REVISION = 'ALPHA';",
    "static": true,
    "longname": "/Users/dyabo/Desktop/convnet-sourcecode/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "REVISION",
    "memberof": "src/index.ts",
    "static": true,
    "longname": "src/index.ts~REVISION",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/index.ts",
    "importStyle": "{REVISION}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/utils.ts",
    "content": "/**\n * Check if an `element` exists in given `array` or not\n */\nexport function arrContains(array: Array<any>, element: number|string): boolean {\n    return array.indexOf(element) > -1;\n}\n\n/**\n * Creates a duplicate-free version of an array\n */\nexport function arrUnique(array: Array<any>): Array<any> {\n    return array.filter((element, index, array) => array.indexOf(element) === index);\n}\n\n/**\n * Check the given `condition`, if `false`, throw exception with the given `message`\n */\nexport function assert(condition: boolean, message: any = 'Assertion failed!'): object|void {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\n\n/**\n * Return the given `dict` value by `key`. \n * - If `key` is a `string`, return the value of `dict[key]` if exists, otherwise return the `defaultValue`\n * - If `key` is an `array`, use the last item of this array as `key` to query the value in `dict`\n * @param {stirng|Array<any>} key - used to query the `dict`\n * @param {any} defaultValue - default value\n */\nexport function getopt(dict: Array<any>, key: string|Array<any>, defaultValue:any): any {\n    if (typeof(key) === 'string') {\n        return dict[key] || defaultValue;\n    } else if (Array.isArray(key)){\n        let returnValue: any = defaultValue;\n        for (let i = 0, len = key.length; i < len; i++) {\n            let dictElementValue = dict[key[i]];\n            if (typeof(dictElementValue) != 'undefined') {\n                returnValue = dictElementValue;\n            }\n        }\n        return returnValue;\n    }\n}\n\n/**\n * Return a random float number between `a` and `b`\n */\nexport function randf(a: number, b: number): number {\n    return Math.random() * (b - a) + a;\n}\n\n/**\n * Return a random integer number between `a` and `b`\n */\nexport function randi(a: number, b: number): number {\n    return Math.floor(randf(a, b))\n}\n\nlet gaussRandomReturnValue: boolean = false;\nlet gaussRandomValue: number = 0.0;\n/**\n * Return a number by following Gaussian distribution by using Box-Muller Transform\n * - https://en.wikipedia.org/wiki/Box-Muller_transform\n * - https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\n */\nexport function gaussRandom(): number {\n    if (gaussRandomReturnValue) {\n        gaussRandomReturnValue = false;\n        return gaussRandomValue;\n    }\n    let u = 2 * Math.random() - 1;\n    let v = 2 * Math.random() - 1;\n    let r = u * u + v * v;\n    if (r === 0 || r === 1) {\n        return gaussRandom();\n    }\n    let c = Math.sqrt(-2*Math.log(r) / r);\n    gaussRandomValue = v * c;\n    gaussRandomReturnValue = true;\n    return u * c;\n};\n\n/**\n * Return a random number based on the given `mean` and `standard deviation` by following Gaussian distribution \n */\nexport function randn(mean: number, std: number): number {\n    return mean + gaussRandom() * std;\n}\n\n/**\n * Return a series of 0\n */\nexport function zeros(n: number): Float64Array {\n    return new Float64Array(n);\n}\n\n/**\n * Return the max/min information of a given value list.\n */\nexport function maxmin(values: number[]): object {\n    if (values.length === 0) return {};\n    let maxValue = Math.max(...values);\n    let minValue = Math.min(...values);\n    return {\n        maxi: values.indexOf(maxValue),\n        maxv: maxValue,\n        mini: values.indexOf(minValue),\n        minv: minValue,\n        dv: maxValue - minValue\n    };\n};\n\n/**\n * Generate a incrementing number list between 0 and `n`, shffle the list and return it as the result\n * - https://www.frankmitchell.org/2015/01/fisher-yates/\n */\nexport function randperm(n: number): Array<number> {\n    let array = Array.from(Array(10).keys());\n    let i = 0;\n    let j = 0;\n    let temp = null;\n    for (i = array.length - 1; i > 0; i -= 1) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n\n/**\n * Return a sample of the given `array` by given `probabilities`\n */\nexport function weightedSample(array: Array<any>, probabilities: Array<number>): Array<any>|void {\n    let probability = randf(0, 1.0);\n    let cumulateProbability = 0.0;\n    for (let k = 0, n = array.length; k < n; k++) {\n        cumulateProbability += probabilities[k];\n        if (probability < cumulateProbability) {\n            return array[k];\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/dyabo/Desktop/convnet-sourcecode/src/utils.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "arrContains",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~arrContains",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{arrContains}",
    "description": "Check if an `element` exists in given `array` or not",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "arrUnique",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~arrUnique",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{arrUnique}",
    "description": "Creates a duplicate-free version of an array",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "assert",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~assert",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{assert}",
    "description": "Check the given `condition`, if `false`, throw exception with the given `message`",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "getopt",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~getopt",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{getopt}",
    "description": "Return the given `dict` value by `key`.\n- If `key` is a `string`, return the value of `dict[key]` if exists, otherwise return the `defaultValue`\n- If `key` is an `array`, use the last item of this array as `key` to query the value in `dict`",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "dict",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "randf",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~randf",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{randf}",
    "description": "Return a random float number between `a` and `b`",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "randi",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~randi",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{randi}",
    "description": "Return a random integer number between `a` and `b`",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "gaussRandomReturnValue",
    "memberof": "src/utils.ts",
    "static": true,
    "longname": "src/utils.ts~gaussRandomReturnValue",
    "access": "public",
    "export": false,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "gaussRandomValue",
    "memberof": "src/utils.ts",
    "static": true,
    "longname": "src/utils.ts~gaussRandomValue",
    "access": "public",
    "export": false,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "gaussRandom",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~gaussRandom",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{gaussRandom}",
    "description": "Return a number by following Gaussian distribution by using Box-Muller Transform\n- https://en.wikipedia.org/wiki/Box-Muller_transform\n- https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve",
    "lineNumber": 67,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "randn",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~randn",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{randn}",
    "description": "Return a random number based on the given `mean` and `standard deviation` by following Gaussian distribution",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mean",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "std",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "zeros",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~zeros",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{zeros}",
    "description": "Return a series of 0",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Float64Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "maxmin",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~maxmin",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{maxmin}",
    "description": "Return the max/min information of a given value list.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"maxi\": *, \"maxv\": *, \"mini\": *, \"minv\": *, \"dv\": *}"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "randperm",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~randperm",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{randperm}",
    "description": "Generate a incrementing number list between 0 and `n`, shffle the list and return it as the result\n- https://www.frankmitchell.org/2015/01/fisher-yates/",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "weightedSample",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~weightedSample",
    "access": "public",
    "export": true,
    "importPath": "convnet-sourcecode/src/utils.ts",
    "importStyle": "{weightedSample}",
    "description": "Return a sample of the given `array` by given `probabilities`",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "probabilities",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "This is a project to annotate karpathy's [ConvnetJS source code](https://github.com/karpathy/convnetjs) and also rewrite it with typescript.\n\n\n### index.js\n\nEntry point\n\n## utils.js\n\nUtilities file, exports random and array operations.",
    "longname": "/Users/dyabo/Desktop/convnet-sourcecode/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"convnet-sourcecode\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"build:docs\": \"./node_modules/.bin/esdoc\",\n    \"build:compile_ts\": \"./node_modules/.bin/tsc\",\n    \"build\": \"npm run build:docs && npm run build:compile_ts\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-typescript-plugin\": \"^1.0.1\",\n    \"typescript\": \"^3.2.2\"\n  }\n}\n",
    "longname": "/Users/dyabo/Desktop/convnet-sourcecode/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]