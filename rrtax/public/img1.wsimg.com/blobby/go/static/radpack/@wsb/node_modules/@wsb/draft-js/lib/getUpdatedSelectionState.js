/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *
 * @emails oncall+draft_js
 */
"use strict";

var DraftOffsetKey = require("./DraftOffsetKey");

var nullthrows = require("fbjs/lib/nullthrows");

function getUpdatedSelectionState(
  editorState,
  anchorKey,
  anchorOffset,
  focusKey,
  focusOffset
) {
  var selection = nullthrows(editorState.getSelection());

  if (process.env.NODE_ENV !== "production") {
    if (!anchorKey || !focusKey) {
      /*eslint-disable no-console */
      console.warn("Invalid selection state.", arguments, editorState.toJS());
      /*eslint-enable no-console */

      return selection;
    }
  }

  var anchorPath = DraftOffsetKey.decode(anchorKey);
  var focusPath = DraftOffsetKey.decode(focusKey);
  var anchorBlockKey = anchorPath.blockKey;
  var focusBlockKey = focusPath.blockKey;
  var anchorBlock = editorState.getBlockTree(anchorBlockKey);
  var focusBlock = editorState.getBlockTree(focusBlockKey); // When there are more than one draft-js fields on the screen and the
  // selection starts on one of them and ends at another, valids anchor and
  // focus keys are extracted from the DOM, but only one is actually present
  // on the editorState of the focused Editor.
  // There is nothing we can do about that, let's return the current selection.

  if (!anchorBlock || !focusBlock) {
    return selection;
  }

  var anchorLeaf = anchorBlock.getIn([
    anchorPath.decoratorKey,
    "leaves",
    anchorPath.leafKey,
  ]);
  var focusLeaf = focusBlock.getIn([
    focusPath.decoratorKey,
    "leaves",
    focusPath.leafKey,
  ]);
  var anchorLeafStart = anchorLeaf.get("start");
  var focusLeafStart = focusLeaf.get("start");
  var anchorBlockOffset = anchorLeaf ? anchorLeafStart + anchorOffset : null;
  var focusBlockOffset = focusLeaf ? focusLeafStart + focusOffset : null;
  var areEqual =
    selection.getAnchorKey() === anchorBlockKey &&
    selection.getAnchorOffset() === anchorBlockOffset &&
    selection.getFocusKey() === focusBlockKey &&
    selection.getFocusOffset() === focusBlockOffset;

  if (areEqual) {
    return selection;
  }

  var isBackward = false;

  if (anchorBlockKey === focusBlockKey) {
    var anchorLeafEnd = anchorLeaf.get("end");
    var focusLeafEnd = focusLeaf.get("end");

    if (focusLeafStart === anchorLeafStart && focusLeafEnd === anchorLeafEnd) {
      isBackward = focusOffset < anchorOffset;
    } else {
      isBackward = focusLeafStart < anchorLeafStart;
    }
  } else {
    var startKey = editorState
      .getCurrentContent()
      .getBlockMap()
      .keySeq()
      .skipUntil(function (v) {
        return v === anchorBlockKey || v === focusBlockKey;
      })
      .first();
    isBackward = startKey === focusBlockKey;
  }

  return selection.merge({
    anchorKey: anchorBlockKey,
    anchorOffset: anchorBlockOffset,
    focusKey: focusBlockKey,
    focusOffset: focusBlockOffset,
    isBackward: isBackward,
  });
}

module.exports = getUpdatedSelectionState;
